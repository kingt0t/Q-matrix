stages:
  - check
  - build
  - deploy
  - release

.only-tag: &only_tag
  only:
    refs:
      - tags
      - /^v\d+\.\d+\.\d+$/
    variables:
      - $PUB_CREDENTIALS
      - $CI_API_KEY

format:
  stage: check
  image: google/dart:latest
  only:
    - merge_requests
  tags:
    - docker
  script:
    - dartfmt . --set-exit-if-changed --fix -n

analyze:
  stage: check
  image: cirrusci/flutter:latest
  only:
    - merge_requests
  tags:
    - docker
  script:
    - flutter pub get
    - dartanalyzer . --fatal-infos --fatal-warnings

#build:
#  stage: build
#  image: cirrusci/flutter:beta
#  <<: *only_tag
#  except:
#    - merge_requests
#  tags:
#    - docker
#  script:
#    - cd /home/cirrus/sdks/flutter && git remote add origin https://github.com/flutter/flutter
#    - flutter channel beta
#    - flutter upgrade
#    - 'echo "version: ${CI_COMMIT_REF_NAME:1}+$((123 + $CI_PIPELINE_IID))" >> pubspec.yaml'
#    - 'echo "SENTRY_DSN=$SENTRY_DSN" > .env'
#    - 'echo "BUILD_TYPE=independent" >> .env'
#    - echo "$STORE" | base64 -d > android/app/pattle.keystore
#    - flutter build apk --flavor standard
#    - mv build/app/outputs/apk/standard/release/app-standard-release.apk pattle.apk
#  after_script:
#    - rm android/app/pattle.keystore
#    - rm .env
#  artifacts:
#    name: pattle-$CI_COMMIT_REF_NAME
#    paths:
#      - pattle.apk
#    expire_in: 1 week

build debug:
  stage: build
  image: cirrusci/flutter:beta
  only:
    - merge_requests
  tags:
    - docker
  script:
    - cd /home/cirrus/sdks/flutter && git checkout stable
    - flutter upgrade
    - flutter build apk --debug --flavor standard

release:
  stage: release
  image: registry.git.pattle.im/pattle/util/release-manager:latest
  <<: *only_tag
  variables:
    GIT_STRATEGY: none
  tags:
    - docker
  dependencies: []
  script:
    - release-manager -action release

sentry:
  stage: release
  image: getsentry/sentry-cli:latest
  <<: *only_tag
  tags:
    - docker
  dependencies: []
  script:
    - export VERSION=${CI_COMMIT_REF_NAME:1}
    - sentry-cli releases new -p pattle $VERSION
    - sentry-cli releases set-commits --auto $VERSION
    - sentry-cli releases deploys $VERSION new --env "production"
